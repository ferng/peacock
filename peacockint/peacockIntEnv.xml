<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mrPeacock>

<!--  =================================================================
      15 Aug 2013        11:45:22

      project            peacockInt
      description        database scripts

      fern
      =================================================================
 -->

<project name = "peacockIntDb" default = "doWhat">
  <property environment="env" />
  <property file="WebContent/WEB-INF/classes/dbJms.properties" />
  <property file="WebContent/WEB-INF/classes/peacockInt.properties" />
  <description>All database management and creation tasks.</description>



 <!--    =================================
        target: doWhat
        =================================
  -->
  <target name="doWhat" description="this: if no target is specified">
    <echo>You'll have to be a bit more specific son, one of these please:</echo>
    <exec executable="grep" >
      <arg value="target\ name" />
      <arg value="peacockIntEnv.xml" />
    </exec>
  </target>



  <!--  =================================
        target: cleanUpDb
        =================================
  -->
  <target name="cleanUpDb" description="clean up and rebuild the database following tests">
    <antcall target="killDdl" />
    <antcall target="execDdl" />
    <antcall target="populateDb" />
    <antcall target="populateTestData" />
  </target>



  <!--  =================================
        target: prepProdDb
        =================================
  -->
  <target name="prepProdDb" description="clean up and rebuild the database ready for non test">
    <antcall target="killDdl" />
    <antcall target="execDdl" />
    <antcall target="populateDb" />
  </target>



  <!--  =================================
        target: startDb
        =================================
  -->
  <target name="startDb" description="start up the database">
    <java fork="true" classname="${dbClass}" classpath="${dbJar}" args="-database.0 ${env.MRPEACOCKDATA_HOME}/${dbFile} -dbname.0 ${dbAlias} -port ${dbPort}" />
  </target>



  <!--  ================================= 
        target: stopDb
        ================================= -->
  <target name="stopDb" description="stop the database">
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes" failOnConnectionError="false" onError="continue">
      
      SHUTDOWN;
      
    </sql>
  </target>



  <!--  ================================= 
        target: stopAll
        ================================= -->
  <target name="stopAll" description="stop all infrastructure">
    <echo>-- Stopping Db</echo>
    <antcall target="stopDb" />
    <echo>-- Stopping ActiveMq</echo>
    <exec executable="C:\Users\Fernando\Documents\bin\apache-activemq-5.8.0\bin\activemq-admin.bat" >
      <arg value="stop" />
    </exec>
    <echo>-- Stopping Tomcat</echo>
    <exec executable="C:\Users\Fernando\Documents\bin\apache-tomcat-7.0.47\bin\catalina.bat" >
      <arg value="stop" />
    </exec>
  </target>



  <!--  ================================= 
        target: testDbConn
        ================================= -->
  <target name="testDbConn" description="test database">
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='INFORMATION_SCHEMA';
    </sql>
  </target>



  <!--  ================================= 
        target: execDdl
        ================================= -->
  <target name="execDdl" description="Create PeacockInt's Database">
    <echo>-- Updating Application Schema</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      
      CREATE TABLE APP_SCHEMA.CUSTOMER
      (
        CUST_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        CUST_ORG_CUST_ID VARCHAR(${orgCustId}) NOT NULL,
        CUST_ORG_ID VARCHAR(${orgCodeSize}) NOT NULL,
        CUST_STATUS VARCHAR(10) NOT NULL,
        CUST_FNAME VARCHAR(${custFnameSize}) NOT NULL,
        CUST_SNAME VARCHAR(${custSnameSize}) NOT NULL,
        CUST_DOB DATE NOT NULL,
        CUST_START_DATE DATE NOT NULL,
        CUST_END_DATE DATE NOT NULL,
      
        CONSTRAINT CUST_ID_CONS PRIMARY KEY (CUST_ID),
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.CUSTOMER TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.CUSTOMER ADD FOREIGN KEY(CUST_ORG_ID) REFERENCES ORGS (ORG_CODE);

      CREATE TABLE APP_SCHEMA.MSG_LOG
      (
        MSG_LOG_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        MSG_ID VARCHAR(${msgIdSize}) NOT NULL,
        MSG_DATETIME TIMESTAMP NOT NULL,
        MSG_STATUS VARCHAR(10) NOT NULL,
        MSG_SOURCE_ORG VARCHAR(${orgCodeSize}) NOT NULL,
        MSG_DEST_ORG VARCHAR(${orgCodeSize}) NOT NULL,
        MSG_ERROR VARCHAR(${msgErrorSize}),
      
        CONSTRAINT MSG_LOG_ID_CONS PRIMARY KEY (MSG_LOG_ID),
        CONSTRAINT MSG_ID_CONS UNIQUE (MSG_ID),
      );
      GRANT SELECT, INSERT, UPDATE, DELETE ON APP_SCHEMA.MSG_LOG TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.MSG_LOG ADD FOREIGN KEY(MSG_SOURCE_ORG) REFERENCES ORGS (ORG_CODE);
      ALTER TABLE APP_SCHEMA.MSG_LOG ADD FOREIGN KEY(MSG_DEST_ORG) REFERENCES ORGS (ORG_CODE);
      
      CREATE TABLE APP_SCHEMA.MSISDN
      (
        MSISDN_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        MSISDN_CUST_ID INTEGER NOT NULL,
        MSISDN VARCHAR(${msisdnSize}) NOT NULL,
        MSISDN_PW VARCHAR(${msisdnPwSize}) NOT NULL,
        MSISDN_STATUS VARCHAR(10) NOT NULL,
      
        CONSTRAINT MSISDN_ID_CONS PRIMARY KEY (MSISDN_ID),
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.MSISDN TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.MSISDN ADD FOREIGN KEY(MSISDN_CUST_ID) REFERENCES CUSTOMER (CUST_ID);
      
      CREATE TABLE APP_SCHEMA.ENDPOINT
      (
        ENDPOINT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        ENDPOINT_URL VARCHAR(${endPointUrlSize}) NOT NULL,
        ENDPOINT_SECURE BOOLEAN NOT NULL,
        ENDPOINT_KEYSTORE VARCHAR(${endPointKeystoreSize}) NOT NULL,
        ENDPOINT_TRUSTSTORE VARCHAR(${endPointTruststoreSize}) NOT NULL,
        ENDPOINT_ALIAS VARCHAR(${endPointAliasSize}) NOT NULL,
      
        CONSTRAINT ENDPOINT_ID_CONS PRIMARY KEY (ENDPOINT_ID),
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.ENDPOINT TO ${dbAppUser};

      CREATE TABLE APP_SCHEMA.COMMS_TYPE
      (
        COMMS_TYPE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        COMMS_TYPE VARCHAR(${commsTypeSize}) NOT NULL,
      
        CONSTRAINT COMMS_TYPE_ID_CONS PRIMARY KEY (COMMS_TYPE_ID),
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.COMMS_TYPE TO ${dbAppUser};
                  
      CREATE TABLE APP_SCHEMA.COMMS_INFO
      (
        COMMS_INFO_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        COMMS_INFO_ORG VARCHAR(${orgCustId}) NOT NULL,
        COMMS_INFO_COMMS_TYPE INTEGER NOT NULL,
        COMMS_INFO_ENDPOINT INTEGER NOT NULL,
      
        CONSTRAINT COMMS_INFO_ID_CONS PRIMARY KEY (COMMS_INFO_ID),
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.COMMS_INFO TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.COMMS_INFO ADD FOREIGN KEY(COMMS_INFO_ORG) REFERENCES ORGS (ORG_CODE);
      ALTER TABLE APP_SCHEMA.COMMS_INFO ADD FOREIGN KEY(COMMS_INFO_COMMS_TYPE) REFERENCES COMMS_TYPE (COMMS_TYPE_ID);
      ALTER TABLE APP_SCHEMA.COMMS_INFO ADD FOREIGN KEY(COMMS_INFO_ENDPOINT) REFERENCES ENDPOINT (ENDPOINT_ID);
      
      COMMIT;
      
    </sql>
    <echo>-- Application Schema Updated</echo>
  </target>  

  


  <!--  ================================= 
        target: populateDb
        ================================= -->
  <target name="populateDb" description="populate PeacockInt's database">
    <echo>-- Poulating Application Configuraton</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
    
      COMMIT;

    </sql>
    <echo>-- Application Configuration Complete</echo>
  </target>  



  <!--  ================================= 
        target: populateTestData
        ================================= -->
  <target name="populateTestData" description="populate PeacockInt's database with test data">
    <echo>-- Populating Test Data</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      INSERT INTO APP_SCHEMA.ENDPOINT VALUES (NULL, 'http://localhost/myBankSimmi', TRUE, '##REPLACE WITH KEYSTORE##', '##REPLACE WITH TRUSTORE##',  '##REPLACE WITH ALIAS##');
      INSERT INTO APP_SCHEMA.COMMS_TYPE VALUES (NULL, 'regRequestValidation');
      INSERT INTO APP_SCHEMA.COMMS_INFO VALUES (NULL, 'MYBNK', 1001, 1001);
      
      COMMIT;

    </sql>
    <echo>-- Test Data Applied</echo>
  </target>  


  
  <!--  ================================= 
        target: killDdl
        ================================= -->
  <target name="killDdl" description="blow away the PeacockInt's database">
    <echo>-- Removing PeacockInt from Schema</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes" onError="continue">
      
      DROP TABLE APP_SCHEMA.COMMS_INFO;
      DROP TABLE APP_SCHEMA.COMMS_TYPE;
      DROP TABLE APP_SCHEMA.ENDPOINT;
      DROP TABLE APP_SCHEMA.MSISDN;
      DROP TABLE APP_SCHEMA.MSG_LOG;
      DROP TABLE APP_SCHEMA.CUSTOMER;
      
      COMMIT;
      
    </sql>
    <echo>-- PeacockInt Removed.  It is dead. D E D.  dead.</echo>
  </target>  


  
  <!--   =================================
         target: cleanUpActiveMQ
         ================================= -->
  <target name="cleanUpActiveMQ" description="get rid of all test messages">
    <echo>-- Removing all queued test messages</echo>
    <exec executable="/home/fern/bin/apache-activemq-5.8.0/bin/activemq-admin" >
      <arg value="purge" />
      <arg value="CUST.REGREQ" />
    </exec>
  </target>

  
  
  <!--  =================================
        target: cleanUpAll
        ================================= -->
  <target name="cleanUpAll" description="clean up and rebuild the database and all queued messages following tests">
    <antcall target="cleanUpActiveMQ" />
    <antcall target="cleanUpDb" />
  </target>
  

</project>