<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mrPeacock>

<!--  =================================================================
      21 Jan 2013       11:45:22

      project           mrPeacock
      description       database scripts

      fern
      =================================================================
 -->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="mrPeacockDb" default="doWhat">
  <property environment="env" />
  <property file="WebContent/WEB-INF/classes/db.properties" />
  <property file="WebContent/WEB-INF/classes/mrPeacock.properties" />
  <description>All database management and creation tasks.</description>



 <!--   =================================
        target: doWhat
        =================================
  -->
  <target name="doWhat" description="this: if no target is specified">
    <echo>You'll have to be a bit more specific son, one of these please:</echo>
    <exec executable="grep" >
      <arg value="target\ name" />
      <arg value="mrPeacockDB.xml" />
    </exec>
  </target>


  
  <!--   =================================
         target: ivyLibsToLib
         =================================
  -->
  <target name="ivyLibsToLib" description="retrieve dependencies with ivy">
    <echo>-- Copying libraries into lib</echo>
    <property name="ivy.default.ivy.user.dir" value="c:\Users\Fernando\Documents\.ivy2" />
    <property name="ivy.lib.dir" value="WebContent/WEB-INF/lib" />
    <ivy:retrieve overwriteMode="never" />
    <echo>-- Copied libraries into lib</echo>
  </target> 



  <!--  =================================
        target: cleanUpDb
        =================================
  -->
  <target name="cleanUpDb" description="clean up the database following tests">
    <antcall target="killDdl" />
    <antcall target="execDdl" />
    <antcall target="populateDb" />
    <antcall target="populateTestData" />
  </target>



  <!--  =================================
        target: startDb
        =================================
  -->
  <target name="startDb" description="start up the database">
    <java fork="true" classname="${dbClass}" classpath="${dbJar}" args="-database.0 ${env.MRPEACOCKDATA_HOME}/${dbFile} -dbname.0 ${dbAlias} -port ${dbPort}" />
  </target>



  <!--  ================================= 
        target: stopDb
        ================================= -->
  <target name="stopDb" description="stop the database">
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      SHUTDOWN;
    </sql>
  </target>



  <!--  ================================= 
        target: testDbConn
        ================================= -->
  <target name="testDbConn" description="test database">
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='INFORMATION_SCHEMA';
    </sql>
  </target>



  <!--  ================================= 
        target: execDdl
        ================================= -->
  <target name="execDdl" description="create Mr. Peacock's Database">
    <echo>-- Creating Application Schema</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      
      CREATE SCHEMA APP_SCHEMA;
      
      
      CREATE TABLE APP_SCHEMA.SYSTEM_ATTRIBUTE
      (
        SYSTEM_ATTRIBUTE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        KEY VARCHAR(40) NOT NULL,
        VALUE VARCHAR(40) NOT NULL,

        CONSTRAINT SYSTEM_ATTRIBUTE_CONS PRIMARY KEY (SYSTEM_ATTRIBUTE_ID),
        CONSTRAINT KEY_CONS UNIQUE (KEY)
      );
      GRANT SELECT ON APP_SCHEMA.SYSTEM_ATTRIBUTE TO ${dbAppUser};

      
      CREATE TABLE APP_SCHEMA.ORGS
      (
        ORG_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        ORG_CODE VARCHAR(${orgCodeSize}) NOT NULL,
        ORG_NAME VARCHAR(${orgNameSize}) NOT NULL,
        ORG_STATUS VARCHAR(10) NOT NULL,
    
        CONSTRAINT ORGS_CONS PRIMARY KEY (ORG_ID),
        CONSTRAINT ORG_CODE_CONS UNIQUE (ORG_CODE)
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.ORGS TO ${dbAppUser};

            
      CREATE TABLE APP_SCHEMA.PEACOCK_USERS
      (
        PEACOCK_USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        USER_ID VARCHAR(${userIdSize}) NOT NULL,
        USER_ORG VARCHAR(${orgCodeSize}) NOT NULL,
        USER_FNAME VARCHAR(${userFnameSize}) NOT NULL,
        USER_SNAME VARCHAR(${userSnameSize}) NOT NULL,
        USER_PW VARCHAR(${userPwSize}) NOT NULL,
        USER_STATUS VARCHAR(10) NOT NULL,

        CONSTRAINT PEACOCK_USER_CONS PRIMARY KEY (PEACOCK_USER_ID),
        CONSTRAINT USER_ID_CONS UNIQUE (USER_ID)
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.PEACOCK_USERS TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.PEACOCK_USERS ADD FOREIGN KEY(USER_ORG) REFERENCES ORGS (ORG_CODE);


      CREATE TABLE APP_SCHEMA.BIN_RANGE
      (
        BIN_RANGE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1001) NOT NULL,
        BIN_RANGE VARCHAR(${binRangeSize}) NOT NULL,
        BIN_ORG VARCHAR(${orgCodeSize}) NOT NULL,

        CONSTRAINT PEACOCK_BIN_CONS PRIMARY KEY (BIN_RANGE_ID),
        CONSTRAINT BIN_RANGE_CONS UNIQUE (BIN_RANGE)
      );
      GRANT SELECT, INSERT, UPDATE ON APP_SCHEMA.BIN_RANGE TO ${dbAppUser};
      ALTER TABLE APP_SCHEMA.BIN_RANGE ADD FOREIGN KEY(BIN_ORG) REFERENCES ORGS (ORG_CODE);

      COMMIT;
      </sql>
    <echo>-- Application Schema Created</echo>
  </target>  



  <!--  ================================= 
        target: populateDb
        ================================= -->
  <target name="populateDb" description="populate Mr. Peacock's database">
    <echo>-- Poulating Application Configuraton</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
    
      INSERT INTO APP_SCHEMA.SYSTEM_ATTRIBUTE VALUES (NULL, 'APP_NAME', '${appName}');

      COMMIT;
    </sql>
    <echo>-- Application Configuration Complete</echo>
  </target>  



  <!--  ================================= 
        target: populateTestData
        ================================= -->
  <target name="populateTestData" description="populate Mr. Peacock's database with test data">
    <echo>-- Populating Test Data</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      
      INSERT INTO APP_SCHEMA.ORGS VALUES (NULL, 'CRNCHY', 'THE CRUNCHY CORNER', 'AUTH');
      INSERT INTO APP_SCHEMA.ORGS VALUES (NULL, 'MYBNK', 'MY BANK', 'AUTH');
      INSERT INTO APP_SCHEMA.ORGS VALUES (NULL, 'UNAUTH', 'UNAUTHORIZED ORG', 'NEW');
      INSERT INTO APP_SCHEMA.PEACOCK_USERS VALUES (NULL, 'admin', 'CRNCHY', 'Nina', 'Gonzalez', 'password', 'ADMIN');
      INSERT INTO APP_SCHEMA.PEACOCK_USERS VALUES (NULL, 'fern', 'CRNCHY', 'fern', 'Gonzalez', 'green', 'ADMIN');
      INSERT INTO APP_SCHEMA.PEACOCK_USERS VALUES (NULL, 'john', 'MYBNK', 'john', 'simpson', 'blue', 'ADMIN');
      INSERT INTO APP_SCHEMA.BIN_RANGE VALUES (NULL, '000001', 'CRNCHY');
      INSERT INTO APP_SCHEMA.BIN_RANGE VALUES (NULL, '000002', 'CRNCHY');
      INSERT INTO APP_SCHEMA.BIN_RANGE VALUES (NULL, '000003', 'MYBNK');
      
      COMMIT;
    </sql>
    <echo>-- Test Data Applied</echo>
  </target>  


  
  <!--  ================================= 
        target: killDdl
        ================================= -->
  <target name="killDdl" description="blow away the Mr. Peacock's database">
    <echo>-- Killing Application Schema</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      DROP SCHEMA APP_SCHEMA CASCADE;
      
      COMMIT;
    </sql>
    <echo>-- Application Schema Killed.  It is dead. D E D.  dead.</echo>
  </target>  

  
  
  <!--  ================================= 
        target: createUser
        ================================= -->
  <target name="createUser" description="create DB users">
    <echo>-- Dropping Users</echo>
    <sql classpath="${dbJar}" driver="${dbDriver}" url="${dbFullUrl}" userid="${dbDbaUser}" password="${dbDbaPassword}" print="yes">
      CREATE USER ${dbAppUser} PASSWORD ${dbAppPw};

      COMMIT;
    </sql>
    <echo>-- Users Created</echo>
  </target>  


</project>